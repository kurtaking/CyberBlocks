public class FindLinks {
while (scan.hasNextLine()) {
String line = scan.nextLine();
while (matcher.find()) {
System.out.println(matcher.group(1));
public class StringCompare 
String s2 = "goodbye";
String s3 = "Happy Birthday";
String s4 = "happy birthday";
System.out.printf(
else
else
else
System.out.printf(
System.out.printf(
System.out.printf(
System.out.printf(
System.out.printf(
if (s3.regionMatches(0, s4, 0, 5))
else
System.out.println(
System.out.println(
else
System.out.println(
public class StringConcatenation 
String s1 = "Happy ";
String s2 = "Birthday";
System.out.printf(
public class StringConstructors 
String s = new String("hello");
String s1 = new String();
String s2 = new String(s);
String s3 = new String(charArray);
System.out.printf(
public class StringIndexMethods 
System.out.printf(
System.out.printf(
System.out.printf(
letters.lastIndexOf('c'));
letters.lastIndexOf('a', 25));
letters.lastIndexOf('$'));
letters.indexOf("def"));
letters.indexOf("def", 7));
letters.indexOf("hello"));
letters.lastIndexOf("def"));
letters.lastIndexOf("def", 25));
letters.lastIndexOf("hello"));
public class StringMiscellaneous 
String s1 = "hello there";
char[] charArray = new char[5];
System.out.printf("s1: %s", s1);
s1.getChars(0, 5, charArray, 0);
for (char character : charArray)
System.out.print(character);
System.out.println();
public class StringMiscellaneous2 
String s1 = "hello";
String s2 = "GOODBYE";
String s3 = "   spaces   ";
System.out.printf(
char[] charArray = s1.toCharArray();
for (char character : charArray)
System.out.print(character);
System.out.println();
public class StringStartEnd 
for (String string : strings)
if (string.startsWith("st"))
System.out.println();
for (String string : strings)
if (string.startsWith("art", 2)) 
System.out.printf(
System.out.println();
for (String string : strings)
if (string.endsWith("ed"))
public class StringValueOf 
boolean booleanValue = true;
char characterValue = 'Z';
int integerValue = 7;
System.out.printf(
String.valueOf(charArray, 3, 3));
System.out.printf(
System.out.printf(
System.out.printf(
public class SubString 
letters.substring(20));
System.out.printf("%s \"%s\"\n", 
letters.substring(3, 6));
package section2;
public class Account {
public void setName(String name) {
public String getName() {
package section2;
import java.util.Scanner;
public class AccountTest {
Account myAccount = new Account();
myAccount.getName());
package section4;
public class Account {
this.name = name;
public void setName(String name) {
this.name = name;
public String getName() {
return name;
package section4;
public class AccountTest {
package section5;
public class Account {
public double getBalance() {
return balance;
public void setName(String name) {
this.name = name;
public String getName() {
return name;
package section5;
import java.util.Scanner;
public class AccountTest {
account1.getBalance());
account2.getBalance());
depositAmount);
account1.getBalance());
account2.getBalance());
depositAmount);
account1.getBalance());
account2.getBalance());
package arraylist;
import java.util.ArrayList;
public class ArrayListCollection {
items.contains("red") ? "" : "not ");
for (String item : items)
System.out.printf(" %s", item);
System.out.println();
package arrays;
import java.util.Arrays;
public class ArrayManipulations {
Arrays.sort(doubleArray);
System.out.printf("%ndoubleArray: ");
for (double value : doubleArray)
System.out.printf("%.1f ", value);
int[] filledIntArray = new int[10];
Arrays.fill(filledIntArray, 7);
displayArray(intArray, "intArray");
if (location >= 0)
else
if (location >= 0)
location);
else
for (int value : array)
System.out.printf("%d ", value);
package gradebook1;
public class GradeBook {
public GradeBook(String name) {
public String getCourseName() {
return courseName;
public void processGrades() {
outputGrades();
getMinimum(), getMaximum() );
outputBarChart();
public int getMinimum() { 
if (grade < lowGrade)
public int getMaximum() { 
for (int grade : grades) {
if (grade > highGrade)
public double getAverage() 	{      
int index = 0;
while (index < grades.length) {
total += grade;
return (double) total / grades.length;
public void outputBarChart() {
int[] frequency = new int[11];
for (int grade : grades)
++frequency[grade / 10];
if (count == 10)
System.out.printf("%5d: ", 100); 
else
System.out.printf("%02d-%02d: ", 
public void outputGrades() {    
student + 1, grades[student] );
public void inputGrades(Scanner in) {
while (in.hasNextInt()) {
int grade = in.nextInt();
if (countGrades == grades.length) {
grades[countGrades] = grade;
countGrades++;
newgrades[i] = grades[i];
grades = newgrades;
package gradebook1;
import java.util.Scanner;
import java.io.File;
import java.io.FileNotFoundException;
public class GradeBookTest {
myGradeBook.getCourseName());
myGradeBook.processGrades();
gradeBook1.getCourseName());
gradeBook1.inputGrades(stdin);
stdin.close();
gradeBook1.processGrades();
gradeBook2.getCourseName());
gradeBook2.inputGrades(infile);
infile.close();
gradeBook2.processGrades();
package gradebook2;
public class GradeBook {
private String courseName;
private int[][] grades;
this.courseName = courseName;
this.grades = grades;
this.courseName = courseName;
public String getCourseName() {
return courseName;
public void processGrades() {
outputGrades();
outputBarChart();
public int getMinimum() {
int lowGrade = grades[0][0];
for (int[] studentGrades : grades) {
for (int grade : studentGrades) {
if (grade < lowGrade)
lowGrade = grade;
return lowGrade;
public int getMaximum() {
int highGrade = grades[0][0];
for (int[] studentGrades : grades) {
for (int grade : studentGrades) {
if (grade > highGrade)
highGrade = grade;
return highGrade;
int total = 0;
for (int grade : setOfGrades)
total += grade;
public void outputBarChart() {
int[] frequency = new int[11];
for (int[] studentGrades : grades) {
for (int grade : studentGrades)
++frequency[grade / 10];
if (count == 10)
System.out.printf("%5d: ", 100);
else
System.out.println();
public void outputGrades() {
System.out.printf("%8d", test);
package gradebook2;
public class GradeBookTest {
myGradeBook.getCourseName());
myGradeBook.processGrades();
package java.awt.font;
import java.text.CharacterIterator;
private char[] chars;
private int pos;
private int begin;
CharArrayIterator(char[] chars) {
reset(chars, 0);
reset(chars, begin);
public char first() {
pos = 0;
return current();
public char last() {
if (chars.length > 0) {
pos = chars.length-1;
else {
pos = 0;
return current();
public char current() {
if (pos >= 0 && pos < chars.length) {
return chars[pos];
else {
return DONE;
public char next() {
if (pos < chars.length-1) {
pos++;
return chars[pos];
else {
pos = chars.length;
return DONE;
public char previous() {
if (pos > 0) {
pos--;
return chars[pos];
else {
pos = 0;
return DONE;
public char setIndex(int position) {
position -= begin;
pos = position;
return current();
public int getBeginIndex() {
return begin;
public int getEndIndex() {
return begin+chars.length;
public int getIndex() {
return begin+pos;
public Object clone() {
c.pos = this.pos;
return c;
void reset(char[] chars) {
reset(chars, 0);
void reset(char[] chars, int begin) {
this.chars = chars;
this.begin = begin;
pos = 0;
package core;
public class EnemyShip1 {
private int shields;
private int offense;
private int defense;
private int hull;
private int damage;
public EnemyShip1() {
setShields(10);
setOffense(20);
setDefense(20);
setHull(20);
setDamage(5);
public int getShields() {
return shields;
public void setShields(int shields) {
this.shields = shields;
public int getOffense() {
return offense;
public void setOffense(int offense) {
this.offense = offense;
public int getDefense() {
return defense;
public void setDefense(int defense) {
this.defense = defense;
public int getHull() {
return hull;
public void setHull(int hull) {
this.hull = hull;
public int getDamage() {
return damage;
public void setDamage(int damage) {
this.damage = damage;
package core;
public GameException(String msg) {
super(msg);
package core;
public class Launcher {
bob.setOffense(15);
try {
bob.saveToFile("bob.txt");
e.printStackTrace();
sue.setOffense(18);
try {
sue.saveToFile("sue.txt");
e.printStackTrace();
EnemyShip1 enemy1 = new EnemyShip1();
if(bob.hits(enemy1))
else
if(sue.hits(enemy1))
else
System.out.println(enemy1);
System.out.println(bob);
package core;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Formatter;
import java.util.Scanner;
public class PlayerShip {
private String playerName;
private int shields;
private int offense;
private int defense;
private int damage;
private int hull;
public PlayerShip() {
setPlayerName("Unknown");
setShields(10);
setOffense(20);
setDefense(10);
setHull(30);
setDamage(10);
public PlayerShip(String pn) {
this();
if(pn == null || pn.length() < 1)
setPlayerName(pn);
int num = Roller.getIntInRange(1, 10);
if(DEBUG)
num += getOffense();
if(DEBUG) {
return num > enemy.getDefense();
Formatter output = null;
try {
output = new Formatter(new File(fn));
output.close();
Scanner input = null;
try {
input = new Scanner(new File(fn));
String pn = "";
int s = 0, d = 0, o = 0, h = 0;
if(!input.hasNextLine())
pn = input.nextLine();
if(!input.hasNextInt()) 
s = input.nextInt();
if(!input.hasNextInt()) 
h = input.nextInt();
if(!input.hasNextInt()) 
o = input.nextInt();
if(!input.hasNextInt()) 
d = input.nextInt();
setPlayerName(pn);
setShields(s);
setHull(h);
setOffense(o);
setDefense(d);
input.close();
public String getPlayerName() {
return playerName;
this.playerName = playerName;
public int getShields() {
return shields;
public void setShields(int shields) {
this.shields = shields;
public int getOffense() {
return offense;
public void setOffense(int offense) {
this.offense = offense;
public int getDefense() {
return defense;
public void setDefense(int defense) {
this.defense = defense;
public int getHull() {
return hull;
public void setHull(int hull) {
this.hull = hull;
public int getDamage() {
return damage;
public void setDamage(int damage) {
this.damage = damage;
public String toString() {
ret += "\tHull: " + getHull();
return ret;
package core;
import java.util.Random;
public class Roller {
return rnd.nextInt(high - low) + 1;
public static Random getRnd() {
return rnd;
Roller.rnd = rnd;
package core;
public class TesterPlayerFile {
player1.setShields(20);
try {
e.printStackTrace();
try {
e.printStackTrace();
package test;
import java.util.Random;
import org.junit.Test;
import core.EnemyShip1;
import core.GameException;
import core.PlayerShip;
import core.Roller;
public class TestRoller {
public void test() {
Roller.getRnd().setSeed(42);
assertTrue(true);
public void testBobHit() {
try {
bob.loadFromFile("bob.txt");
e.printStackTrace();
EnemyShip1 enemy1 = new EnemyShip1();
Roller.getRnd().setSeed(42);
assertTrue(bob.hits(enemy1));
assertFalse(bob.hits(enemy1));
public void testSueHit() {
try {
sue.loadFromFile("sue.txt");
e.printStackTrace();
EnemyShip1 enemy1 = new EnemyShip1();
Roller.getRnd().setSeed(42);
assertTrue(sue.hits(enemy1));
assertTrue(sue.hits(enemy1));
